let chalk,fs,ncp,promisify;_261‍.x([["createProject",()=>createProject]]);_261‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_261‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_261‍.w("ncp",[["default",["ncp"],function(v){ncp=v}]]);_261‍.w("util",[["promisify",["promisify"],function(v){promisify=v}]]);




const access = promisify(fs.access);
const copy = promisify(ncp);

async function copyTemplateFiles(options) {
    return copy(options.templateDir, options.targetDirectory, {
        clobber: false,
    });
};

       async function createProject(options) {
    options = {
        ...options,
        targetDirectory: options.targetDirectory || process.cwd(),
    }

    
    const templateDir = __dirname.toString()
    .replace('src', 'templates\\' + options.template
    .toLowerCase())
    .toString()
    _261‍.g.console.log(templateDir)
    
    options = {
        ...options,
        templateDir: templateDir
    }
    try {
        await access(templateDir, fs.constants.R_OK).catch();
    } catch (error) {
        _261‍.g.console.error(error)
        _261‍.g.console.error('%s Jokin meni väärin.', chalk.red.bold('ERROR'));
        process.exit(1);
    }

    console.log('Kopioidaan tiedostoja');
    await copyTemplateFiles(options);

    _261‍.g.console.log('%s Projekti valmiina', chalk.green.bold('VALMIS'))
    return true;
}