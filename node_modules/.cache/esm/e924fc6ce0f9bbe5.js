let arg,inquirer,createProject;_e0f‍.x([["cli",()=>cli]]);_e0f‍.w("arg",[["default",["arg"],function(v){arg=v}]]);_e0f‍.w("inquirer",[["default",["inquirer"],function(v){inquirer=v}]]);_e0f‍.w("./main",[["createProject",["createProject"],function(v){createProject=v}]]);



function parseArgumentsIntoOptions(rawArgs){
    const args = arg({
        '--git': Boolean,
        '--yes': Boolean,
        '--install': Boolean,
        '--firebase': Boolean,
        '-g': '--git',
        '-f': '--firebase',
        '-i': '--install',
        '-y': '--yes',
        
    },
    {
        argv: rawArgs.slice(2),
    });
    return {
        skipPrompts: args['--yes'] || false,
        git: args['--git'] || false,
        template: args._[0],
        runInstall: args['--install'] || false,
        firebase: args['--firebase'] || false,
    }
}

async function missingOptionsPrompt(options){
    const defaultTemplate = 'JavaScript';
    if (options.skipPrompts) {
        return {
            ...options,
            template: options.template || defaultTemplate,
        }
    }
    const questions = [];
    if (!options.template) {
        questions.push(
            {
                type: 'list',
                name: 'template',
                message: 'Minkä mallin haluat?',
                choices: ['JavaScript', 'TypeScript', 'React', 'DiscordJs'],
                default: defaultTemplate,
            }
        )
    }
    if (!options.git) {
        questions.push(
            {
                type: 'confirm',
                name: 'git',
                message: 'Haluatko Git repositoryn?',
                default: false,
            }
        )
    }
    if (!options.firebase) {
        questions.push(
            {
                type: 'confirm',
                name: 'firebase',
                message: 'Haluatko Firebase configin?',
                default: false,
            }
        )
    }
    
    const answers = await inquirer.prompt(questions);
    return {
        ...options,
        template: options.template || answers.template,
        git: options.git || answers.git,
        firebase: options.firebase || answers.firebase,
        targetDirectory: process.cwd()
    }
}

       async function cli(args){
    let options = parseArgumentsIntoOptions(args);
    options = await missingOptionsPrompt(options);
    _e0f‍.g.console.log(options.targetDirectory)
    await createProject(options);
}